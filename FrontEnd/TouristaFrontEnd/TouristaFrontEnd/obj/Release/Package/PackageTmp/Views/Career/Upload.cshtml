@model Tourista.API.Models.CareerFormModel


@{
    ViewBag.Title = "Upload";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<div id="wrapper-content">
    <!-- MAIN CONTENT-->
    <div class="main-content">
        <section class="page-banner blog">
            <div class="container">
                <div class="page-title-wrapper">
                    <div class="page-title-content">
                        <ol class="breadcrumb">
                            <li>
                                @Html.ActionLink(@TouristaFrontEnd.Resources.Global.Header_Home, "Index", "Home", null, new { @class = "link home" }) 
                            </li>

                            <li class="active"><a href="#" class="link">@TouristaFrontEnd.Resources.Global.Header_Careers</a></li>
                        </ol>
                        <div class="clearfix"></div>
                        <h2 class="captions">@TouristaFrontEnd.Resources.Global.Header_Careers</h2>
                    </div>
                </div>
            </div>
        </section>
        @if (null != TempData["alertMessage"])
        {
            <script type="text/javascript">
                alert("@TempData["alertMessage"]");
            </script>
        }

        <section class="page-main padding-top padding-bottom">
            <div class="container">
                <div class="row">
                    @using (Html.BeginForm("Upload", "Career", null, FormMethod.Post, new { enctype = "multipart/form-data" }))

                    {
                        @Html.AntiForgeryToken()
                        @Html.Hidden("CareerId", Model.CareerId);
                        @Html.Hidden("CareerTitle", Model.CareerTitle);
                        <div class="form-horizontal">
                            <hr />
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="mg-contact-form-input">
                                <label for="subject"> Firstname</label> 
                                @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control form-input" } })
                                @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                            </div>
                            <div class="mg-contact-form-input">
                                <label for="subject"> Email</label>
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>

                            <div class="mg-contact-form-input">
                                <label for="subject"> PhoneNo</label>

                                @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
                            </div>

                            @*<div class="form-group">
                                    @Html.LabelFor(model => model.Message, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Message, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Message, "", new { @class = "text-danger" })
                                    </div>
                                </div>*@
                            <div class="mg-contact-form-input">
                                <label for="subject"> Message</label>
                                @Html.EditorFor(model => model.Message, new { htmlAttributes = new { @class = "form-control", rows = "5" } })
                                @Html.ValidationMessageFor(model => model.Message, "", new { @class = "text-danger" })
                            </div>
                            <div class="mg-contact-form-input">
                                <label for="subject"> Attach</label>

                                <input type="file" id="input-id" accept="application/pdf,application/vnd.ms-excel" name="file" />
                                @Html.ValidationMessageFor(model => model.File, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" id="btnSubmit" class="btn btn-dark-main pull-right" value="Create">
                                    @*<input type="submit" value="Create" class="btn btn-default" />*@
                                </div>
                            </div>
                        </div>
                    }
                </div>

            </div>
        </section>

    </div>
</div>

<script type="text/javascript">
    $(function () {
        var myfile = "";

        $('#input-id').on('change', function () {
            myfile = $(this).val();
            var ext = myfile.split('.').pop();
            if (ext == "pdf" || ext == "docx" || ext == "doc") {
                // alert(ext);
            } else {
                alert("fieAlert");
            }
        });

        //$("#input-id").on('change', function(event) {
        //    var file = event.target.files[0];
        //    if(file.size>=2*1024*1024) {
        //        alert("JPG images of maximum 2MB");
        //        $(".form").get(0).reset(); //the tricky part is to "empty" the input file here I reset the form.
        //        return;
        //    }
        //    //if(!file.type.match('image/jp.*')) {

        //    if (!file.type.match('application/p.*')) {
        //        alert("only JPG images");
        //        $(".form").get(0).reset(); //the tricky part is to "empty" the input file here I reset the form.
        //        return;
        //    }

        //    var fileReader = new FileReader();
        //    fileReader.onload = function(e) {
        //        var int32View = new Uint8Array(e.target.result);
        //        //verify the magic number
        //        // for JPG is 0xFF 0xD8 0xFF 0xE0 (see https://en.wikipedia.org/wiki/List_of_file_signatures)
        //        if(int32View.length>4 && int32View[0]==0xFF && int32View[1]==0xD8 && int32View[2]==0xFF && int32View[3]==0xE0) {
        //            alert("ok!");
        //        } else {
        //            alert("only valid JPG images");
        //            $(".form").get(0).reset(); //the tricky part is to "empty" the input file here I reset the form.
        //            return;
        //        }
        //    };
        //    fileReader.readAsArrayBuffer(file);
        //});
    });
</script>